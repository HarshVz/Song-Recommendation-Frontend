"use client"

import { useState, useRef, useEffect } from "react";
import { Play, Pause } from "lucide-react";
import axios from "axios";


export default function Home() {

    const [source, setSource] = useState({
        "Album Image URL": "https://i.scdn.co/image/ab67616d0000b273b46f74097655d7f353caab14",
        "Album Name": "As It Was",
        "Album Release Date": "2022-03-31",
        "Album URI": "spotify:album:2pqdSWeJVsXAhHFuVLzuA8",
        "Artist Name(s)": "Harry Styles",
        "Artist URI(s)": "spotify:artist:6KImCVD70vtIoJWnq6nGn3",
        "Copyrights": "P (P) 2022 Erskine Records Limited, under exclusive license to Columbia Records, a Division of Sony Music Entertainment",
        "Danceability": 0.52,
        "Duration_ms": 167303,
        "Energy": 0.731,
        "Explicit": false,
        "Label": "Columbia",
        "Popularity": 28,
        "Tempo": 173.93,
        "Track Name": "As It Was - Harry Styles",
        "Track Preview URL": "https://p.scdn.co/mp3-preview/c43dd07043b29e800c1a65b3a0102861fa3cf418?cid=9950ac751e34487dbbe027c4fd7f8e99",
        "Track URI": "spotify:track:4LRPiXqCikLlN15c3yImP7",
        "Valence": 0.662
    })
    const [song, setSong] = useState(source);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(false);
    const [recommendations, setRecommendations] = useState([]);
    const [isPlaying, setIsPlaying] = useState(false);
    const [isPlayingIndex, setIsPlayingIndex] = useState(0);

    useEffect(() => {
        const fetchRecommendations = async () => {
            setLoading(true);
            setError(false);
            try {
                const formData = new FormData();
                formData.append("song_uri", source["Track URI"]);

                const response = await axios.post("http://127.0.0.1:5000/recommendation", formData);


                const data = response.data;
                console.log(data);

                if (data.success && Array.isArray(data.recommendations)) {
                    setRecommendations(prev => {
                        const combined = [...prev, ...data.recommendations];
                        const uniqueMap = new Map();
                        combined.forEach(song => {
                            //if song["Track URI"] is not null or undefined

                            if (song["Track URI"]) {
                                uniqueMap.set(song["Track URI"], song);
                            }
                        });
                        return Array.from(uniqueMap.values());
                    });
                } else {
                    console.error('Unexpected response format:', data);
                    setError(true); // Optional: show error on UI
                }


            } catch (error) {
                console.error("Error fetching recommendations:", error);
                setError(true);
            } finally {
                setLoading(false);
            }
        };

        fetchRecommendations();
    }, [source])

    const handleOnClick = (index: number) => {
        if (isPlayingIndex === index) {
            setIsPlaying(!isPlaying);  // Toggle same song
        } else {
            setIsPlaying(true);        // Start new song\
            setIsPlayingIndex(index);  // Update index
            setSource(recommendations[index]);
        }
    }



    return (
        <main className="w-full h-full p-10">

            {
                source && (
                    <div className="mt-10">
                        <div className="grid md:grid-cols-3 gap-5 ">
                            <div className="md:col-span-1">
                                <MusicCard
                                    source={source}
                                    isPlaying={isPlaying}
                                    handleOnClick={() => handleOnClick(isPlayingIndex ? isPlayingIndex : 0)}
                                />
                            </div>
                            <div className="md:col-span-2">
                                <h2 className="text-2xl font-bold mb-4">Currently Playing!</h2>
                                <div className="w-full">
                                        <div className="col-span-1">
                                            <InitialSource
                                                source={source}
                                                isPlaying={isPlaying}
                                                handleOnClick={() => handleOnClick(isPlayingIndex ? isPlayingIndex : 0)}
                                            />
                                        </div>
                                </div>
                                <h2 className="text-2xl font-bold mb-4">Recommendations</h2>
                                <div className="w-full">
                                    {recommendations.map((song, index) => (
                                        <div key={index} className="col-span-1">
                                            <SongCards
                                                source={song}
                                                isPlaying={isPlaying && isPlayingIndex === index}
                                                handleOnClick={() => handleOnClick(index)}
                                            />
                                        </div>
                                    ))}
                                </div>
                            </div>
                        </div>
                    </div>
                )
            }

        </main>
    );
}

interface MusicCardProps {
    source: {
        "Album Image URL": string;
        "Album Name": string;
        "Album Release Date": string;
        "Album URI": string;
        "Artist Name(s)": string;
        "Artist URI(s)": string;
        "Copyrights": string,
        "Danceability": number,
        "Duration_ms": number,
        "Energy": number,
        "Explicit": boolean,
        "Label": string,
        "Track Name": string;
        "Track Preview URL": string;
        "Track URI": string;
        "Valence": number;
    },
    isPlaying: boolean;

    handleOnClick: () => void;
}


function MusicCard({ source, isPlaying, handleOnClick }: MusicCardProps) {


    return (

        <div className={`flex flex-col justify-center items-center bg-neutral-900 rounded-xl w-full p-3 border-2 transition-all duration-300 drop-shadow-xl ${isPlaying ? " border-neutral-500 drop-shadow-neutral-600/40" : "border-neutral-900 drop-shadow-transparent"
            } `}>
            <img src={source["Album Image URL"]} alt={source["Album Name"]} className="w-full h-full aspect-square mb-4 object-center object-cover rounded-full" />
            <div className="w-full flex justify-between items-center p-2 gap-3">
                <div className="flex items-center bg-neutral-800 p-3 rounded-full"
                    onClick={() => handleOnClick()}
                >
                    {isPlaying ? (
                        <Pause className="w-5 h-5 text-neutral-200" />
                    ) : (
                        <Play className="w-5 h-5 text-neutral-200" />
                    )}
                </div>
                <div className="w-full flex flex-col items-start">
                    <h3 className="text-lg font-semibold line-clamp-1">{source["Track Name"].split("-")[0]}</h3>
                    <p className="text-sm">{source["Artist Name(s)"]}</p>
                </div>
            </div>
        </div>
    )
}

function SongCards({ source, isPlaying, handleOnClick }: MusicCardProps) {
    const audioRef = useRef<HTMLAudioElement>(null);

    useEffect(() => {
        const audio = audioRef.current;
        if (!audio) return;
        if (isPlaying) {
            audio.play();
        } else {
            audio.pause();
        }
    }, [isPlaying]);

    return (

        <div className={`flex flex-row justify-center items-center bg-neutral-900 rounded-xl w-full p-3 border-2 transition-all duration-300 drop-shadow-xl mb-3 ${isPlaying ? " border-neutral-500 drop-shadow-neutral-600/40" : "border-neutral-900 drop-shadow-transparent"
            } `}>
            <div className="image-container w-16 h-16">
                <img src={source["Album Image URL"]} alt={source["Album Name"]} className="min-w-full min-h-full aspect-square mb-4 object-center object-cover rounded-full" />
            </div>
            <div className="w-full flex justify-between items-center p-2 gap-3">
                <div className="w-full flex flex-col items-start">
                    <h3 className="text-lg font-semibold line-clamp-1">{source["Track Name"].split("-")[0]}</h3>
                    <p className="text-sm">{source["Artist Name(s)"]}</p>
                </div>
                <div className="flex items-center bg-neutral-800 p-3 rounded-full"
                    onClick={() => handleOnClick()}
                >
                    {isPlaying ? (
                        <Pause className="w-5 h-5 text-neutral-200" />
                    ) : (
                        <Play className="w-5 h-5 text-neutral-200" />
                    )}
                </div>
            </div>
            <audio
                ref={audioRef}
                className="mt-4 rounded-lg bg-neutral-900">
                <source src={source["Track Preview URL"]} type="audio/mpeg" />
                Your browser does not support the audio element.
            </audio>
        </div>
    )
}


function InitialSource({ source, isPlaying}: MusicCardProps) {

    return (

        <div className={`flex flex-row justify-center items-center bg-neutral-900 rounded-xl w-full p-3 border-2 transition-all duration-300 drop-shadow-xl mb-3 ${isPlaying ? " border-neutral-500 drop-shadow-neutral-600/40" : "border-neutral-900 drop-shadow-transparent"
            } `}>
            <div className="image-container w-16 h-16">
                <img src={source["Album Image URL"]} alt={source["Album Name"]} className="min-w-full min-h-full aspect-square mb-4 object-center object-cover rounded-full" />
            </div>
            <div className="w-full flex justify-between items-center p-2 gap-3">
                <div className="w-full flex flex-col items-start">
                    <h3 className="text-lg font-semibold line-clamp-1">{source["Track Name"].split("-")[0]}</h3>
                    <p className="text-sm">{source["Artist Name(s)"]}</p>
                </div>
            </div>
        </div>
    )
}
